#!/bin/bash

## Set release base and version
MY_RELEASE_BASE="/uscms/home/eberry/TowerAlgo/"
CMSSW_VERSION="CMSSW_2_2_7"
TAG="IDEAL_V12"
TEST="false"

## Set variables
job=$1
numevents=$2

if [ -n $3 ]; then
    suffix=${3}
else
    suffix=_${3}
fi

if [ $TEST = "true" ]; then
    job=1
    numevents=2
    suffix="_TEST"
fi

## Set some seeds from the date
seed1=`date +%S%N | head -c 8 | sed 's/0*//'`
sleep 0.0345
seed2=`date +%S%N | head -c 8 | sed 's/0*//'`
sleep 0.1882
seed3=`date +%S%N | head -c 8 | sed 's/0*//'`
sleep 0.2534
seed4=`date +%S%N | head -c 8 | sed 's/0*//'`
sleep 0.1141
seed5=`date +%S%N | head -c 8 | sed 's/0*//'`
sleep 0.0553
seed6=`date +%S%N | head -c 8 | sed 's/0*//'`
sleep 0.0112
seed7=`date +%S%N | head -c 8 | sed 's/0*//'`
sleep 0.1232
seed8=`date +%S%N | head -c 8 | sed 's/0*//'`
sleep 0.1067
seed9=`date +%S%N | head -c 8 | sed 's/0*//'`
sleep 0.0224
seed10=`date +%S%N | head -c 8 | sed 's/0*//'`


## Set file names
tarFile=${MY_RELEASE_BASE}/${CMSSW_VERSION}/src/Release.tar
cfgFile=ConstPhiSprayPionGun_job${job}_${numevents}events${suffix}_cfg.py

if [ $TEST != "true" ]; then
    ## Go to the scratch directory
    cd ${_CONDOR_SCRATCH_DIR}

    ## Load the environment
    source /uscmst1/prod/sw/cms/shrc uaf

    ## Download, compile, and initialize CMSSW
    scram p CMSSW ${CMSSW_VERSION}
    cd ${CMSSW_VERSION}/src
fi

eval `scram runtime -sh`

if [ $TEST != "true" ]; then
    ## Untar the tar ball containing the analysis framework
    tar -xvf ${tarFile}

    ## Remove the old .pyc files and recompile
    find -name "*.pyc" -print | xargs rm
    scram b
    showtags

    ## Go back to the scratch directory
    cd ${_CONDOR_SCRATCH_DIR}
fi

## Tell the log file what you're going to do
echo I am going to perform MC steps GEN, SIM, DIGI, and RAW on a pion particle gun
echo I am using CMSSW version: ${CMSSW_VERSION}
echo I am making python cfg file: ${cfgFile}
echo I am going to analyze ${numevents} events
echo I am using the suffix ${3}
echo This is job ${job}, and I have to do ${numevents} events/job

## Make the config file

cat > ${cfgFile}<<EOF

import FWCore.ParameterSet.Config as cms

process = cms.Process("GEN-SIM-DIGI-RAW")

process.load("FWCore.MessageService.MessageLogger_cfi")

process.load("Configuration.StandardSequences.SimulationRandomNumberGeneratorSeeds_cff")
process.load("Configuration.StandardSequences.VtxSmearedBetafuncEarlyCollision_cff")
process.load("Configuration.StandardSequences.Generator_cff")
process.load("Configuration.StandardSequences.Simulation_cff")
process.load("Configuration.StandardSequences.Geometry_cff")
process.load("Configuration.StandardSequences.MagneticField_cff")
process.load("Configuration.StandardSequences.Reconstruction_cff")
process.load("Configuration.StandardSequences.MixingNoPileUp_cff")
process.load("Configuration.StandardSequences.DigiToRaw_cff")
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
process.load("L1Trigger.Configuration.SimL1Emulator_cff")
process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
process.load("Configuration.EventContent.EventContent_cff")

process.load("L1TriggerConfig.L1GtConfigProducers.Luminosity.lumi1031.L1Menu_MC2009_v0_L1T_Scales_20080922_Imp0_Unprescaled_cff")

process.GlobalTag.globaltag = '${TAG}::All'

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(${numevents})
)

process.RandomNumberGeneratorService = cms.Service("RandomNumberGeneratorService",
        sourceSeed = cms.untracked.uint32(10245752)
)

process.RandomNumberGeneratorService.sourceSeed = ${seed1}
process.source = cms.Source("FlatRandomEGunSource",
    PGunParameters = cms.untracked.PSet(
        PartID = cms.untracked.vint32(211),
        MinEta = cms.untracked.double(-4.0),
        MaxEta = cms.untracked.double(4.0),
        MinPhi = cms.untracked.double(1.571),
        MaxPhi = cms.untracked.double(1.571),
        MinE = cms.untracked.double(100.0),
        MaxE = cms.untracked.double(100.0)
    ),
    Verbosity = cms.untracked.int32(0), ## set to 1 (or greater)  for printouts
    AddAntiParticle = cms.untracked.bool(True) ## back-to-back particles
)

process.RandomNumberGeneratorService.moduleSeeds = cms.PSet(
	g4SimHits = cms.untracked.uint32(${seed2}),
	VtxSmeared = cms.untracked.uint32(${seed3}),
	simSiPixelDigis = cms.untracked.uint32(${seed4}),
	simSiStripDigis = cms.untracked.uint32(${seed5}),
	simEcalUnsuppressedDigis = cms.untracked.uint32(${seed6}),
	simHcalUnsuppressedDigis = cms.untracked.uint32(${seed7}),
	simMuonCSCDigis = cms.untracked.uint32(${seed8}),
	simMuonDTDigis = cms.untracked.uint32(${seed9}),
	simMuonRPCDigis = cms.untracked.uint32(${seed10})
)


process.out = cms.OutputModule("PoolOutputModule",                               
                                outputCommands = cms.untracked.vstring( 'drop *',
                                                                        'keep H*DataFramesSorted_*_*_*',
                                                                        'keep E*DigiCollection_*_*_*', 
									'keep FEDRawDataCollection_*_*_*', 
									'keep *TriggerPrimitiveDigisSorted_*_*_*'),
                                fileName = cms.untracked.string('ConstPhiSprayPionGun_${TAG}_GEN-SIM-DIGI-RAW_job${job}_${numevents}events${suffix}.root')
)

process.GEN  = cms.Path(process.pgen)
process.SIM  = cms.Path(process.psim)
process.DIGI = cms.Path(process.pdigi)
process.L1   = cms.Path(process.SimL1Emulator)
process.RAW  = cms.Path(process.DigiToRaw)
process.OUT  = cms.EndPath(process.out)

process.schedule = cms.Schedule()
process.schedule.append( process.GEN  )
process.schedule.append( process.SIM  )
process.schedule.append( process.DIGI )
process.schedule.append( process.L1   )
process.schedule.append( process.RAW  )
process.schedule.append( process.OUT  )


EOF

## Run the .cfg file
cmsRun ${cfgFile}

## Remove the .cfg file and the CMSSW build
if [ $TEST != true ]; then
    rm ${cfgFile} 
    rm -rf ${CMSSW_VERSION}
fi

