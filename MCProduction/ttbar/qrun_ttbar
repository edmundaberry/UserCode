#!/bin/tcsh

## Set release base and version
set MY_RELEASE_BASE = /uscms/home/eberry
set CMSSW_VERSION = CMSSW_2_2_3

## Set variables
set job          = $1
set numevents    = $2
set topMassInGeV = $3
set suffix       = $4

## Set file names
## set tarFile = ${MY_RELEASE_BASE}/${CMSSW_VERSION}/src/MCProduction.tar
set cfgFile = TTBar_job${job}_${numevents}events_${suffix}_cfg.py

## Go to the scratch directory
## cd ${_CONDOR_SCRATCH_DIR}

## Load the environment
source /uscmst1/prod/sw/cms/cshrc uaf

## Download, compile, and initialize CMSSW
## scram p CMSSW ${CMSSW_VERSION}
## cd ${CMSSW_VERSION}/src
eval `scram runtime -csh`

## Untar the tar ball containing the analysis framework
## tar -xvf ${tarFile}

## Remove the old .pyc files and recompile
## find -name "*.pyc" -print | xargs rm
## scram b

## Go back to the scratch directory
## cd ${_CONDOR_SCRATCH_DIR}

## Set seed for RandomNumberGeneratorService from the date
set seed = `date +%S%N | head -c 8`
@ seed = $seed + 0

## Tell the log file what you're going to do
echo I am going to make some TTBar events!
echo Pythia will use a top mass of ${topMassInGeV} GeV/c^2
echo I am using CMSSW version: ${CMSSW_VERSION}
echo I am making python cfg file: ${cfgFile}
echo I am going to analyze ${numevents} events
echo I am using seed ${seed}

## Make the config file

cat > ${cfgFile}<<EOF

import FWCore.ParameterSet.Config as cms

process = cms.Process("ttbar")

## Typical boring stuff
process.load('FWCore/MessageService/MessageLogger_cfi')
process.load("Configuration.StandardSequences.Services_cff")

## Global tag
process.load("Configuration.StandardSequences.Geometry_cff")
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_noesprefer_cff")
process.GlobalTag.globaltag = 'IDEAL_V9::All'

## Parametrized magnetic field (new mapping, 4.0 and 3.8T)
process.load("Configuration.StandardSequences.MagneticField_38T_cff")
process.VolumeBasedMagneticFieldESProducer.useParametrizedTrackerField = True

## Generator sequences (gives you "pgen")
process.load("Configuration.StandardSequences.Generator_cff")
process.load("Configuration.StandardSequences.VtxSmearedBetafuncEarlyCollision_cff")

## Simulation sequences (gives you "psim" and "pdigi")
process.load("Configuration.StandardSequences.Simulation_cff")
process.load('Configuration/StandardSequences/MixingNoPileUp_cff')

## L1 emulator sequence (gives you "SimL1Emulator")
process.load('Configuration/StandardSequences/SimL1Emulator_cff')

## Digi-to-raw sequence (gives you "DigiToRaw")
process.load('Configuration/StandardSequences/DigiToRaw_cff')

## Event output
process.load("Configuration.EventContent.EventContent_cff")

## Number of events to use
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(${numevents})
)

## Random numbers for simulation
process.RandomNumberGeneratorService.theSource.initialSeed = cms.untracked.uint32(${seed})

## Pythia source
process.load('Configuration.Generator.TTbar_cfi')

## We want to be able to set the top mass ourselves
process.source.PythiaParameters.processParameters = cms.vstring(
'MSEL      = 0     ! User defined processes', 
'MSUB(81)  = 1     ! qqbar to QQbar', 
'MSUB(82)  = 1     ! gg to QQbar', 
'MSTP(7)   = 6     ! flavour = top', 
'PMAS(6,1) = ${topMassInGeV}  ! top quark mass')

## We want the L1 jet threshold level to be 20 GeV/c
process.L1GctConfigProducers.L1CaloJetZeroSuppressionThresholdInGeV = cms.double(20.0)

## Make sure that GlobalTag doesn't re-write your Jet calibration function
## Jet calibration function is where the HT jet threshold is set
## You need this to do L1 jet threshold studies

process.myPrefer = cms.ESPrefer("L1GctConfigProducers")

## Output process
process.output = cms.OutputModule("PoolOutputModule",
    outputCommands = process.RAWSIMEventContent.outputCommands,
    fileName = cms.untracked.string('gen.root'),
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('GEN-SIM-RAW'),
        filterName = cms.untracked.string('IDEAL_V9')
    ),
    ##SelectEvents = cms.untracked.PSet(
    ##    SelectEvents = cms.vstring('generation_step')
    ##)
)

## Put the generator-level processes into a path
process.GEN  = cms.Path(process.pgen)
process.SIM  = cms.Path(process.psim)
process.DIGI = cms.Path(process.pdigi)
process.L1   = cms.Path(process.SimL1Emulator)
process.RAW  = cms.Path(process.DigiToRaw)
process.OUT  = cms.EndPath(process.output)

## schedule everything
process.schedule = cms.Schedule()
process.schedule.append(process.GEN )
process.schedule.append(process.SIM )
process.schedule.append(process.DIGI)
process.schedule.append(process.L1  )
process.schedule.append(process.RAW )
process.schedule.append(process.OUT )

EOF

cmsRun ${cfgFile}
