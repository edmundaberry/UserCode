#!/bin/tcsh 

## USAGE: Creates and executes a .cfg file
## entry 1 is the location (can use $PWD)
## entry 2 is the seed/job number (don't use zero)
## entry 3 is the number of events (qsub uses 100)
## entry 4 is whether to use a neutrino gun (empty) or pythia dijet gen source	
##    0 = use neutrinos
##    1 = use dijets
## entry 5 is whether to use noise from CRUZET
##    0 = use simulated noise
##    1 = use CRUZET noise
## Submit to condor with qsub_dataOverlay

## -----------------------------------------------------
## Uncomment the next 5 lines to test this executable on any computer
## Comment them to submit to queue

## set work_dir = $PWD
## set seed = 1
## set numevents = 10
## set useCRUZET = 0 
## set sourceName = nuGun

## -----------------------------------------------------
## These lines are here for when you submit to cmslpc
## Comment them if you submit to della

set work_dir = $1
set seed = $2
set numevents = $3
if ($4 == 0) set sourceName = nuGun
if ($4 == 1) set sourceName = diJet
if ($5 == 0) set useCRUZET = false
if ($5 == 1) set useCRUZET = true

## -----------------------------------------------------

cd ${CMSSW_BASE}
cmsenv
cd $work_dir
echo `pwd`

set seed1 = 100 
set seed2 = 200
set seed3 = 300
set seed4 = 400

if ($useCRUZET == 1) set methodName = CRUZET
if ($useCRUZET == 0) set methodName = Gauss

set startingEventNumber = 0
@ startingEventNumber = $seed * $numevents

@ seed1 = $seed1 + ( $seed * 2 )
@ seed2 = $seed2 + ( $seed * 6 )
@ seed3 = $seed3 + ( $seed * 4 )
@ seed4 = $seed4 + ( $seed * 5 )

## -----------------------------------------------------
## Just to be safe, print out what you're going to do

echo This is job $seed, generating $numevents events
echo with a $sourceName source and with
echo useCRUZET set to $useCRUZET
echo " "
echo "Seeds " $seed1 $seed2 $seed3 $seed4

## -----------------------------------------------------
## Make the .cfg file and run it

cat > my${sourceName}_${seed}_${numevents}.cfg<<EOF

process OVERLAY = {

	##-----------------------------------------------------------
	## Maximum number of events
	##-----------------------------------------------------------

	untracked PSet maxEvents = {untracked int32 input = $numevents}

	##-----------------------------------------------------------
	## Standard configuration files
	##-----------------------------------------------------------

	include "FWCore/MessageService/data/MessageLogger.cfi"

	include "Configuration/StandardSequences/data/Services.cff"
	include "Configuration/StandardSequences/data/Geometry.cff"
	include "Configuration/StandardSequences/data/MagneticField.cff"
	include "Configuration/StandardSequences/data/Generator.cff"
	include "Configuration/StandardSequences/data/Simulation.cff"
        include "Configuration/StandardSequences/data/L1Emulator.cff" 
	include "Configuration/StandardSequences/data/DigiToRaw.cff"
	include "Configuration/StandardSequences/data/VtxSmearedBetafuncEarlyCollision.cff"
	include "Configuration/StandardSequences/data/Reconstruction.cff"      
	include "Configuration/StandardSequences/data/FakeConditions.cff"
        include "Configuration/StandardSequences/data/MixingNoPileUp.cff" 
	include "Configuration/Generator/data/PythiaUESettings.cfi"

	##-----------------------------------------------------------
	## Latest HCAL configuration file
	##-----------------------------------------------------------
	
	##include "Analyzers/DijetAnalyzer/data/RecommendedHcalConditions.cff"
	
	##-----------------------------------------------------------
	## Set random seeds
	##-----------------------------------------------------------

	replace RandomNumberGeneratorService.sourceSeed = ${seed1}346
	replace RandomNumberGeneratorService.moduleSeeds = {
			untracked uint32 VtxSmeared = ${seed2}123
			untracked uint32 g4SimHits  = ${seed3}453
			untracked uint32 mix        = ${seed4}925

			untracked uint32 siPixelDigis = ${seed1}417
			untracked uint32 siStripDigis = ${seed2}162
			untracked uint32 ecalUnsuppressedDigis = ${seed3}5366
			untracked uint32 hcalUnsuppressedDigis = ${seed4}344
			untracked uint32 muonCSCDigis  = ${seed1}344
			untracked uint32 muonDTDigis = ${seed2}226
			untracked uint32 muonRPCDigis = ${seed3}1159
	}
	
	##-----------------------------------------------------------
	## 'Signal' source
	##-----------------------------------------------------------

	include "Analyzers/HcalDigiAnalyzer/data/PythiaSource_${sourceName}.cff"
	
	##-----------------------------------------------------------
	## Very important: Tell the hcal digi producer whether
	## to take noise from CRUZET
	##-----------------------------------------------------------
	
	replace hcalUnsuppressedDigis.takeNoiseFromCRUZETData = $useCRUZET
	replace hcalUnsuppressedDigis.startingEventNumber = $startingEventNumber
	
	replace hcalUnsuppressedDigis.hbFile = "${HOME}/data/HcalFinalOutput_HB_run50908_TP.root"
	replace hcalUnsuppressedDigis.heFile = "${HOME}/data/HcalFinalOutput_HE_run50908_TP.root"
	replace hcalUnsuppressedDigis.hoFile = "${HOME}/data/HcalFinalOutput_HO_run50908_TP.root"
	replace hcalUnsuppressedDigis.hfFile = "${HOME}/data/HcalFinalOutput_HF_run50908_TP.root"

	##-----------------------------------------------------------
	## Include appropriate LUT's
	##-----------------------------------------------------------
	
	include "SimCalorimetry/HcalTrigPrimProducers/data/hcaltpdigi.cff" 
	replace HcalTPGCoderULUT.read_Ascii_LUTs = true
	replace HcalTPGCoderULUT.inputLUTs = "Analyzers/HcalDigiAnalyzer/data/forCRUZET3/inputLUTcoder_CRUZET_part3_v2_noHO.dat"
	
	include "CalibCalorimetry/CaloTPG/data/CaloTPGTranscoder.cfi"
	replace CaloTPGTranscoder.hcalLUT1 = "Analyzers/HcalDigiAnalyzer/data/forCRUZET3/outputLUTtranscoder_CRUZET_part3_v2.dat"
	replace CaloTPGTranscoder.hcalLUT2 = "Analyzers/HcalDigiAnalyzer/data/forCRUZET3/Decompression.dat"


	##-----------------------------------------------------------
	## Set up your paths
	##-----------------------------------------------------------

	path p0 = {pgen} 		# generator
	path p1 = {psim} 		# simulation -- psim and pdigi are usually listed together as "simulation"
	path p2 = {pdigi} 		# digitization, only needed for the calorimeters
	path p3 = {L1Emulator}		# Trigger
	path p4 = {DigiToRaw}		# Digi going to Raw
	path p5 = {reconstruction} 	# reconstruction
	
	##-----------------------------------------------------------
	## Set up your event output and endpath
	##-----------------------------------------------------------
	
	include "Configuration/EventContent/data/EventContent.cff"

	module output = PoolOutputModule { 

		untracked vstring outputCommands = {
		    "keep *"
		}

		untracked string fileName = "${HOME}/data/dataOverlayOutput_${seed}_${numevents}_${useCRUZET}_${sourceName}_keepAll.root"
    	}

	endpath outpath = {output}

	##-----------------------------------------------------------
	## Finally, make your schedule and run
	##-----------------------------------------------------------

	schedule = {p0,p1,p2,p3,p4,p5,outpath}

}
EOF

echo "cmsRun my${sourceName}_${seed}_${numevents}.cfg"

cmsRun my${sourceName}_${seed}_${numevents}.cfg
