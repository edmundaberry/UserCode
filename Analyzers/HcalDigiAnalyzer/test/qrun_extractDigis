#!/bin/tcsh

## Scans over digis in a given data set
## Can scan over either CRUZET data or reco-level MC
## 
## USAGE:
## One argument, which determines which source to use
## Use 0 to run over CRUZET data (only available on CMSLPC)
## Use 1 to run over reco-level MC (if available, default is for nuGun)

cd ${CMSSW_BASE}
cmsenv

cd ${CMSSW_BASE}/src/Analyzers/HcalDigiAnalyzer/test

set run = 50908
set cffFileName = "CRUZETDataSet_run${run}.cff"

if ($1 == 0) set source = "Analyzers/HcalDigiAnalyzer/data/${cffFileName}"
if ($1 == 1) set source = "Analyzers/DijetAnalyzer/data/dataFiles_nuGun_CRUZET_test.cff"

if ($1 == 0) set suffix = "TP"
if ($1 == 1) set suffix = "PostSimAnalysis"

if ($1 == 0) set schedule = "{produce1,produce2,analyze}"
if ($1 == 1) set schedule = "{analyze}"

cat > extractDigisAndAnalyze_run${run}.cfg<<EOF

process ExtractDigisAndAnalyze =  {  

	##-----------------------------------------------
	## Input number of events (10000 is typical)
	##-----------------------------------------------

	untracked PSet maxEvents = {untracked int32 input = 2000}

	##-----------------------------------------------
	## Input data files
	##-----------------------------------------------

        include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
        include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"
	include "EventFilter/HcalRawToDigi/data/HcalRawToDigi.cfi"
	include "Configuration/StandardSequences/data/FakeConditions.cff"
	include "Analyzers/DijetAnalyzer/data/RecommendedHcalConditions.cff"
	
	##-----------------------------------------------
	## Source goes here.  You need an empty source
	## that'll get replaced in the datafile
	##-----------------------------------------------
	
	include "${source}"

	##-----------------------------------------------
	## Input proper LUT's
	##-----------------------------------------------
	
	include "SimCalorimetry/HcalTrigPrimProducers/data/hcaltpdigi.cff" 
	replace HcalTPGCoderULUT.read_Ascii_LUTs = true
	replace HcalTPGCoderULUT.inputLUTs = "Analyzers/HcalDigiAnalyzer/data/forCRUZET3/inputLUTcoder_CRUZET_part3_v2_noHO.dat"
	
	include "CalibCalorimetry/CaloTPG/data/CaloTPGTranscoder.cfi"
	replace CaloTPGTranscoder.hcalLUT1 = "Analyzers/HcalDigiAnalyzer/data/forCRUZET3/outputLUTtranscoder_CRUZET_part3_v2.dat"
	replace CaloTPGTranscoder.hcalLUT2 = "Analyzers/HcalDigiAnalyzer/data/forCRUZET3/Decompression.dat"

	##-----------------------------------------------
	## Declare analyzer objects for each DataFrame type
	##-----------------------------------------------

	replace hcalTriggerPrimitiveDigis.inputLabel = hcalDigis

	module hbDigiAnalyzer = HBHEDigiAnalyzer {
		untracked string outPath    = "${HOME}/data/"
		untracked string outSuffix  = "_run${run}_${suffix}"
		untracked string subdetName = "HB"
		untracked bool scanForSpikes = true
	}

	module heDigiAnalyzer = HBHEDigiAnalyzer {
		untracked string outPath    = "${HOME}/data/"
		untracked string outSuffix  = "_run${run}_${suffix}"
		untracked string subdetName = "HE"
	}
	
	module hoDigiAnalyzer = HODigiAnalyzer {
		untracked string outPath    = "${HOME}/data/"
		untracked string outSuffix  = "_run${run}_${suffix}"
		untracked string subdetName = "HO"
	}
	
	module hfDigiAnalyzer = HFDigiAnalyzer {
		untracked string outPath    = "${HOME}/data/"
		untracked string outSuffix  = "_run${run}_${suffix}"
		untracked string subdetName = "HF"
		untracked bool scanForSpikes = true
	}

	path produce1 = {hcalDigis}
	path produce2 = {hcalTriggerPrimitiveDigis}
	path analyze = {hbDigiAnalyzer,
			heDigiAnalyzer,
			hoDigiAnalyzer,
			hfDigiAnalyzer }
			
	schedule = ${schedule}

}
EOF

cmsRun extractDigisAndAnalyze_run${run}.cfg
