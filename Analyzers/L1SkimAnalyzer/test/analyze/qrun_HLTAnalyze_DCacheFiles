#!/bin/tcsh

## Set release base and version
set MY_RELEASE_BASE = /uscms/home/eberry
set CMSSW_VERSION = CMSSW_2_2_3
set TEST = false
set PROCESS_NAME = HLTAnalysis

## Set variables

if ($TEST != true) then
set job = $1
set numevents = $2
set ptBin = $3
set suffix = $4
else 
set job = 1
set numevents = 2
set ptBin = 5
set suffix = TEST
endif

## Set file names
set tarFile = ${MY_RELEASE_BASE}/${CMSSW_VERSION}/src/Analyzers.tar
set cfgFile = AnalyzeRelValQCD_ptBin${ptBin}_job${job}_${numevents}events_${suffix}_cfg.py

## Figure out how many events to skip
set step = 1
set jobMinusOne = 0
@ jobMinusOne = $job - $step
set eventsToSkip = 0
@ eventsToSkip = $numevents * $jobMinusOne

## Go to the scratch directory
if ($TEST != true) then 
cd ${_CONDOR_SCRATCH_DIR}

## Load the environment
source /uscmst1/prod/sw/cms/cshrc uaf

## Download, compile, and initialize CMSSW
scram p CMSSW ${CMSSW_VERSION}
cd ${CMSSW_VERSION}/src
endif

eval `scram runtime -csh`

if ($TEST != true) then
## Untar the tar ball containing the analysis framework
tar -xvf ${tarFile}
## Remove the old .pyc files and recompile
find -name "*.pyc" -print | xargs rm
scram b
## Go back to the scratch directory
cd ${_CONDOR_SCRATCH_DIR}
endif

## Tell the log file what you're going to do
echo I am going to analyze rel val QCD
echo I am using CMSSW version: ${CMSSW_VERSION}
echo I am making python cfg file: ${cfgFile}
echo I am going to analyze ${numevents} events
echo I am looking at PtBin number ${ptBin}
echo I am using the suffix ${suffix}
echo This is job ${job}, and I have to do ${numevents} events/job
echo    so I will skip ${eventsToSkip}

## Make the config file

cat > ${cfgFile}<<EOF
import FWCore.ParameterSet.Config as cms

process = cms.Process("${PROCESS_NAME}")

process.load("FWCore.MessageService.MessageLogger_cfi")

process.source = cms.Source("PoolSource",
     fileNames = cms.untracked.vstring( 
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job1.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job2.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job3.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job4.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job5.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job6.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job7.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job8.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job9.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job10.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job11.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job12.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job13.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job14.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job15.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job16.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job17.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job18.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job19.root',
'dcache:/pnfs/cms/WAX/resilient/eberry/CMSSW_ROOT_Files/ReRunL1/S08_qcdDijets/qcdDijets_ReRunL1_withCMSSW_2_2_3_ptBin${ptBin}_jetThreshold20GeV_job20.root'
     )
)
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32( ${numevents} )
)

process.load("Configuration.StandardSequences.GeometryPilot2_cff")
process.load("Configuration.StandardSequences.MagneticField_cff")

# Conditions: fake or frontier
# process.load("Configuration.StandardSequences.FakeConditions_cff")
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
process.GlobalTag.globaltag = 'STARTUP_V9::All'

# process.load("Configuration.StandardSequences.L1Emulator_cff")
# Choose a menu/prescale/mask from one of the choices
# in L1TriggerConfig.L1GtConfigProducers.Luminosity
process.load("Configuration.StandardSequences.L1TriggerDefaultMenu_cff")

# Run HLT
process.load("HLTrigger.HLTanalyzers.HLTopen_cff")

# Define the analyzer modules
process.load("HLTrigger.HLTanalyzers.HLTAnalyser_cfi")
process.hltanalysis.RunParameters.HistogramFile = cms.untracked.string('openhlt_RelValQCD_withReRunL1_ptBin${ptBin}_${numevents}events_job${job}.root')
process.analyzeThis = cms.Path( process.hltanalysis )

# Schedule the whole thing
process.schedule = cms.Schedule( 
    # Schedule the whole thing
     process.DoHltMuon, 
     process.DoHLTJets,
     process.DoHLTPhoton, 
     process.DoHLTElectron, 
     process.DoHLTElectronStartUpWindows, 
     process.DoHLTElectronLargeWindows, 
     process.DoHLTTau, 
     process.DoHLTBTag,
     process.DoHLTAlCaECALPhiSym,
     process.DoHLTAlCaPi0,
     process.analyzeThis 
)
 
EOF

## Run the .cfg file
cmsRun ${cfgFile}

## Remove the .cfg file and the CMSSW buil
if ($TEST != true) then
rm ${cfgFile} 
rm -rf ${CMSSW_VERSION}
endif

