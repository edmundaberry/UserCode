#!/bin/tcsh

## Set release base and version
set MY_RELEASE_BASE = /uscms/home/eberry
set CMSSW_VERSION = CMSSW_2_2_3
set TEST = false
set PROCESS_NAME = HLTAnalysis

## Set variables

if ($TEST != true) then
set job = $1
set numevents = $2
set ptBin = $3
set suffix = $4
else then 
set job = 1
set numevents = 2
set ptBin = 5
set suffix = TEST
endif

## Set file names
set tarFile = ${MY_RELEASE_BASE}/${CMSSW_VERSION}/src/Analyzers.tar
set cfgFile = AnalyzeRelValQCD_ptBin${ptBin}_job${job}_${numevents}events_${suffix}_cfg.py

## Figure out how many events to skip
set step = 1
set jobMinusOne = 0
@ jobMinusOne = $job - $step
set eventsToSkip = 0
@ eventsToSkip = $numevents * $jobMinusOne

## Go to the scratch directory
if ($TEST != true) then 
cd ${_CONDOR_SCRATCH_DIR}
endif

## Load the environment
source /uscmst1/prod/sw/cms/cshrc uaf

## Download, compile, and initialize CMSSW
if ($TEST != true) then
scram p CMSSW ${CMSSW_VERSION}
cd ${CMSSW_VERSION}/src
endif
eval `scram runtime -csh`

if ($TEST != true) then
## Untar the tar ball containing the analysis framework
tar -xvf ${tarFile}
## Remove the old .pyc files and recompile
find -name "*.pyc" -print | xargs rm
scram b
## Go back to the scratch directory
cd ${_CONDOR_SCRATCH_DIR}
endif

## Tell the log file what you're going to do
echo I am going to analyze rel val QCD
echo I am using CMSSW version: ${CMSSW_VERSION}
echo I am making python cfg file: ${cfgFile}
echo I am going to analyze ${numevents} events
echo I am looking at PtBin number ${ptBin}
echo I am using the suffix ${suffix}
echo This is job ${job}, and I have to do ${numevents} events/job
echo    so I will skip ${eventsToSkip}

## Make the config file

cat > ${cfgFile}<<EOF

import FWCore.ParameterSet.Config as cms

process = cms.Process("${PROCESS_NAME}")
process.load("FWCore.MessageLogger.MessageLogger_cfi")

process.load("Configuration.StandardSequences.GeometryPilot2_cff")
process.load("Configuration.StandardSequences.MagneticField_cff")

##-------------------------------------------------------------------------------------
## Input the source files
##-------------------------------------------------------------------------------------

## Which source?
process.load("Analyzers.L1SkimAnalyzer.relValQCD_withDigi_PtBin${ptBin}_cff")

## How many events to skip?
process.source.skipEvents = cms.untracked.uint32(${eventsToSkip})

## How many events to run over?
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(${numevents})
)

## Use digis produced by the re-run L1 emulator, not the original emulator
process.source.inputCommands = cms.untracked.vstring(
    'keep *',
    'drop *_simCscTriggerPrimitiveDigis_*_HLT',
    'drop *_simRctDigis_*_HLT',
    'drop *_simGctDigis_*_HLT',
    'drop *_simDtTriggerPrimitiveDigis_*_HLT',
    'drop *_simDttfDigis_*_HLT',
    'drop *_simGmtDigis_*_HLT',
    'drop *_simCsctfDigis_*_HLT',
    'drop *_simRpcTriggerDigis_*_HLT',
    'drop *_simCsctfTrackDigis_*_HLT',
    'drop *_TriggerResults_*_HLT',
    'drop *_l1extraParticles_*_HLT',
    'drop *_hlt*_*_HLT'
)

##-------------------------------------------------------------------------------------
## Global tag info
##-------------------------------------------------------------------------------------

process.load("Configuration.StandardSequences.Geometry_cff")
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_noesprefer_cff")
process.GlobalTag.globaltag = 'IDEAL_V9::All'
process.myPrefer = cms.ESPrefer("L1GctConfigProducers")

##-------------------------------------------------------------------------------------
## Rerun the L1 emulator
##-------------------------------------------------------------------------------------

# L1 configuration. Set proper threshold
process.load('L1Trigger.Configuration.L1DummyConfig_cff')
process.load("L1Trigger.Configuration.SimL1Emulator_cff")
process.L1GctConfigProducers.L1CaloJetZeroSuppressionThresholdInGeV = cms.double(20.0)

# Do L1Extra with re-run digis
process.l1extraParticles = cms.EDProducer("L1ExtraParticlesProd",
    muonSource = cms.InputTag("simGmtDigis","","${PROCESS_NAME}"),
    etTotalSource = cms.InputTag("simGctDigis","","${PROCESS_NAME}"),
    nonIsolatedEmSource = cms.InputTag("simGctDigis","nonIsoEm","${PROCESS_NAME}"),
    etMissSource = cms.InputTag("simGctDigis","","${PROCESS_NAME}"),
    produceMuonParticles = cms.bool(True),
    forwardJetSource = cms.InputTag("simGctDigis","forJets","${PROCESS_NAME}"),
    centralJetSource = cms.InputTag("simGctDigis","cenJets","${PROCESS_NAME}"),
    produceCaloParticles = cms.bool(True),
    tauJetSource = cms.InputTag("simGctDigis","tauJets","${PROCESS_NAME}"),
    isolatedEmSource = cms.InputTag("simGctDigis","isoEm","${PROCESS_NAME}"),
    etHadSource = cms.InputTag("simGctDigis","","${PROCESS_NAME}"),
    centralBxOnly = cms.bool(True)
)

# Setup the L1 path
process.ReRunL1 = cms.Path(process.SimL1Emulator * process.l1extraParticles)

##-------------------------------------------------------------------------------------
## Rerun the HLT on those L1 digis
##-------------------------------------------------------------------------------------

## Needed for HLT
process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")

## Load the typical HLT cfg files
process.load("HLTrigger.HLTanalyzers.HLTopen_cff")

## Make sure the HLT uses the emulator digis
from L1Trigger.Configuration import patchToRerunL1Emulator
patchToRerunL1Emulator.switchToSimGtDigis( process )

##-------------------------------------------------------------------------------------
## Run the official HLT analyzer for rate studies
##-------------------------------------------------------------------------------------

process.load("HLTrigger.HLTanalyzers.HLTAnalyser_cfi")
process.hltanalysis.RunParameters.HistogramFile = cms.untracked.string('openhlt_RelValQCD_withReRunL1_ptBin${ptBin}_${numevents}events_job${job}.root')
process.hltAnalyzer = cms.Path(process.hltanalysis)

##-------------------------------------------------------------------------------------
## If necessary, dump the output
##-------------------------------------------------------------------------------------

## process.out = cms.OutputModule("PoolOutputModule",
##     fileName = cms.untracked.string('test.root'),
##     outputCommands = cms.untracked.vstring('keep *')
## )
## 
## process.finalProcess = cms.EndPath(process.out)

##-------------------------------------------------------------------------------------
## Schedule everything
##-------------------------------------------------------------------------------------

process.schedule = cms.Schedule()
process.schedule.append(process.ReRunL1)
process.schedule.append(process.DoHLTJets)
process.schedule.append(process.hltAnalyzer)
## process.schedule.append(process.finalProcess)

EOF

## Run the .cfg file
cmsRun ${cfgFile}

## Remove the .cfg file and the CMSSW buil
if ($TEST != true) then
rm ${cfgFile} 
rm -rf ${CMSSW_VERSION}
endif

